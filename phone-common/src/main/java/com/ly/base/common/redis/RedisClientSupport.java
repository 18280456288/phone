package com.ly.base.common.redis;import java.util.Collection;import java.util.List;import java.util.Map;import java.util.Set;import java.util.concurrent.TimeUnit;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.core.HashOperations;import org.springframework.data.redis.core.ListOperations;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.SetOperations;import org.springframework.data.redis.core.ValueOperations;import org.springframework.data.redis.core.ZSetOperations;import org.springframework.data.redis.core.ZSetOperations.TypedTuple;import com.ly.base.common.redis.CacheAccessException.ErrorCode;import com.ly.base.common.util.ArrayUtil;public class RedisClientSupport {	private final Logger logger = Logger.getLogger(RedisClientSupport.class.getName());	/**	 * 默认过期时长 1天	 */	public static final long DEFAULT_TIMEOUT =  60 * 60 * 24   ;	/*	public static RedisClientSurppot getRedisClient(){		return (RedisClientSurppot)ApplicationContext.getBean("redisClientSurppot");	}	*///	@Autowired//	@Qualifier("redisTemplate")	@Autowired	private RedisTemplate<String,Object> redisTemplate;	@Autowired	@Qualifier("jedisConnectionFactory")	private JedisConnectionFactory jedisConnectionFactory;	/*	 * #Base	 */	public void selectDB(int db){		System.out.println("####redis selectDB"+db);//		redisTemplate.getConnectionFactory().getConnection().select(db);		jedisConnectionFactory.getConnection().select(db);	}	//	public int getSelectDB(){//		return jedisConnectionFactory.getDatabase();//	}		public void delete(String key) throws CacheAccessException{		try {			redisTemplate.delete(key);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public void deleteKeys(Set<String> keys) throws CacheAccessException{		try {			ArrayUtil.foreach(keys, (key)->{				redisTemplate.delete(key);				return true;			});		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Set<String> keys(String key) throws CacheAccessException {		try {			return redisTemplate.keys(key);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	/**	 * 设置过期时间	 * @param key 键	 * @param timeout 过期时长 单位秒	 * @throws CacheAccessException 	 */	public Boolean expire(String key , long timeout) throws CacheAccessException{		try {			return redisTemplate.expire(key, timeout, TimeUnit.SECONDS);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	/*	 * #Value	 */	public Object getValue(String key) throws CacheAccessException{		try {			return opsForValue().get(key);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public List<Object> getValues(Collection<String> keys) throws CacheAccessException{		try {			return opsForValue().multiGet(keys);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public void putValue(String key,Object value) throws CacheAccessException{		try {			opsForValue().set(key,value);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public void putValues(Map<? extends String, ? extends Object> m) throws CacheAccessException{		try {			opsForValue().multiSet(m);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public void putValue(String key,String value,boolean append) throws CacheAccessException{		try {			if (append) {				opsForValue().append(key,value);			}else{				opsForValue().set(key,value);			}		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Long incrementValue(String key,long delta) throws CacheAccessException{		try {			return opsForValue().increment(key, delta);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	/*	 * #Hash	 */		public Long deleteHashAll(final String key , final Object... hashKeys) throws CacheAccessException{		try {			return opsForHash().delete(key, hashKeys);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}		public Map<Object, Object> getHashs(String key) throws CacheAccessException{		try {			return opsForHash().entries(key);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Object getHash(String key,String hashKey) throws CacheAccessException{		try {			return opsForHash().get(key, hashKey);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public void putHash(String key,String hashKey,Object value) throws CacheAccessException{		try {			opsForHash().put(key, hashKey,value);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Long incrementHash(String key,String hashKey,long delta) throws CacheAccessException{		try {			return opsForHash().increment(key, hashKey, delta);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	/*	 * #List	 */	public Long putListLeftAll(final String key , final Object... values) throws CacheAccessException{		try {			return opsForList().leftPushAll(key, values);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Long putListRightAll(final String key , final Object... values) throws CacheAccessException{		try {			return opsForList().rightPushAll(key, values);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Object getListLeftAndRemove(String key) throws CacheAccessException{		try {			return opsForList().leftPop(key);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Object getListRightAndRemove(String key) throws CacheAccessException{		try {			return opsForList().rightPop(key);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public List<Object> getListLeft(String key,int start,int end) throws CacheAccessException{		try {			return opsForList().range(key, start, end);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Long getListSize(String hashKey) throws CacheAccessException{		try {			return opsForList().size(hashKey);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	/*	 * HashSet	 */	public Long putSetAll(String hashKey,Object... values) throws CacheAccessException{		try {			return opsForSet().add(hashKey, values);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Object getSetAndRemove(String hashKey) throws CacheAccessException{		try {			return opsForSet().pop(hashKey);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Set<Object> getSet(String hashKey) throws CacheAccessException{		try {			return opsForSet().members(hashKey);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	/**	 * 获取差集	 * @param hashKey	 * @param tarKey	 * @return	 * @throws CacheAccessException	 */	public Set<Object> getSetDiff(String hashKey,String tarKey) throws CacheAccessException{		try {			return opsForSet().difference(hashKey, tarKey);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	/**	 * 获取交集	 * @param hashKey	 * @param tarKey	 * @return	 * @throws CacheAccessException	 */	public Set<Object> getSetInter(String hashKey,String tarKey) throws CacheAccessException{		try {			return opsForSet().intersect(hashKey, tarKey);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	/**	 * 获取并集	 * @param hashKey	 * @param tarKey	 * @return	 * @throws CacheAccessException	 */	public Set<Object> getSetUnion(String hashKey,String tarKey) throws CacheAccessException{		try {			return opsForSet().union(hashKey, tarKey);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Long getSetSize(String hashKey) throws CacheAccessException{		try {			return opsForSet().size(hashKey);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	/*	 *  Sorted set	 */	public Boolean putZSet(String key,Object value,double score) throws CacheAccessException{		try {			return opsForZSet().add(key, value,score);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Long putZSetAll(String key,Set<TypedTuple<Object>> tuples) throws CacheAccessException{		try {			return opsForZSet().add(key, tuples);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Set<Object> getZSet(String key,long start,long end) throws CacheAccessException{		try {			return opsForZSet().range(key, start, end);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Set<Object> getZSetReverse(String key,long start,long end) throws CacheAccessException{		try {			return opsForZSet().reverseRange(key, start, end);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Set<Object> getZSetByScore(String key,double min,double max) throws CacheAccessException{		try {			return opsForZSet().rangeByScore(key, min, max);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Set<Object> getZSetByScoreReverse(String key,double min,double max) throws CacheAccessException{		try {			return opsForZSet().reverseRangeByScore(key, min, max);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Double getZSetScore(String key,Object o) throws CacheAccessException{		try {			return opsForZSet().score(key, o);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Double incrementZSetScore(String key,Object value,double delta) throws CacheAccessException{		try {			return opsForZSet().incrementScore(key, value, delta);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Long getZSetSize(String hashKey) throws CacheAccessException{		try {			return opsForZSet().size(hashKey);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	public Long deleteZSetAll(final String key, final Object... values) throws CacheAccessException{		try {			return opsForZSet().remove(key, values);		} catch (Exception e) {			logger.error(e.getMessage(),e);			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}		/*	 * 获取操作	 */	public HashOperations<String, Object, Object> opsForHash(){		return redisTemplate.opsForHash();	}	public ValueOperations<String, Object> opsForValue(){		return redisTemplate.opsForValue();	}	public ListOperations<String, Object> opsForList(){		return redisTemplate.opsForList();	}	public SetOperations<String, Object> opsForSet(){		return redisTemplate.opsForSet();	}	public ZSetOperations<String, Object> opsForZSet(){		return redisTemplate.opsForZSet();	}		public RedisTemplate<String, Object> getRedisTemplate() {		return redisTemplate;	}	public void setJedisConnectionFactory(JedisConnectionFactory jedisConnectionFactory) {		this.jedisConnectionFactory = jedisConnectionFactory;	}	public void setRedisTemplate(RedisTemplate<String, Object> redisTemplate) {		this.redisTemplate = redisTemplate;	}//	//	public String serializable(){//		//	}}